// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  userType  UserType @default(CITIZEN)
  joinDate  DateTime @default(now())
  
  // Civic engagement tracking
  civicScore    Int      @default(0)
  lastActive    DateTime @default(now())
  neighborhood  String?
  
  // Relations
  votes           Vote[]
  ideaSubmissions IdeaSubmission[]
  votingHistory   VotingHistory[]
  
  @@map("users")
}

model Project {
  id          String          @id @default(cuid())
  title       String
  description String
  category    ProjectCategory
  
  // Location data for map display
  latitude    Float
  longitude   Float
  location    String? // Human-readable location
  
  // Project lifecycle
  status      ProjectStatus   @default(PROPOSAL)
  budget      Int?
  timeline    String?
  impact      String[] // Affected neighborhoods
  
  // Voting configuration
  votingStart DateTime?
  votingEnd   DateTime?
  isVotingOpen Boolean @default(false)
  
  // External integration
  externalId  String? // For Bordeaux PLU API integration
  sourceApi   String? // Which API this came from
  
  // Relations
  votes       Vote[]
  updates     ProjectUpdate[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("projects")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  voteType  VoteType
  weight    Float    @default(1.0) // For future vote weighting
  createdAt DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([userId, projectId])
  @@map("votes")
}

model IdeaSubmission {
  id          String                @id @default(cuid())
  userId      String
  title       String
  description String
  category    ProjectCategory
  
  // Location for citizen proposals
  latitude    Float
  longitude   Float
  location    String
  
  // Additional submission data
  expectedBudget Int?
  timeline       String?
  photos         String[] // URLs to uploaded photos
  
  // Processing status
  status      SubmissionStatus @default(SUBMITTED)
  adminNotes  String?
  reviewedAt  DateTime?
  
  // If approved, link to created project
  projectId   String?
  
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("idea_submissions")
}

model VotingHistory {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  action    String   // "voted", "changed_vote", "removed_vote"
  details   Json?    // Additional context
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("voting_history")
}

model ProjectUpdate {
  id        String   @id @default(cuid())
  projectId String
  title     String
  content   String
  updateType UpdateType @default(GENERAL)
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("project_updates")
}

model BoiteAIdees {
  id            String   @id @default(cuid())
  isOpen        Boolean  @default(false)
  openDate      DateTime?
  closeDate     DateTime?
  theme         String?  // Optional theme for submission period
  description   String?
  createdAt     DateTime @default(now())
  
  @@map("boite_a_idees")
}

// Enums for the civic engagement platform
enum UserType {
  CITIZEN      // Regular citizen voter
  ADMIN        // City administrator
  MODERATOR    // Community moderator
}

enum ProjectCategory {
  LOGEMENT            // Housing projects
  TRANSPORT           // Transportation & mobility
  ESPACES_VERTS       // Parks & green spaces
  EQUIPEMENTS_PUBLICS // Public facilities
  AMENAGEMENT_URBAIN  // Urban development
  CULTURE_SPORT       // Cultural & sports facilities
  ENVIRONNEMENT       // Environmental projects
}

enum ProjectStatus {
  PROPOSAL        // Initial proposal phase
  VOTE_EN_COURS   // Active voting period
  APPROUVE        // Approved by community vote
  EN_TRAVAUX      // Under construction/implementation
  TERMINE         // Completed
  REJETE          // Rejected after vote
  SUSPENDU        // Suspended/on hold
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum SubmissionStatus {
  SUBMITTED       // Just submitted by citizen
  UNDER_REVIEW    // Being reviewed by city officials
  APPROVED        // Approved to become a project
  REJECTED        // Rejected by city review
  NEEDS_REVISION  // Needs changes before approval
}

enum UpdateType {
  GENERAL         // General project update
  STATUS_CHANGE   // Status change notification
  BUDGET_UPDATE   // Budget information update
  TIMELINE_UPDATE // Timeline change
  COMPLETION      // Project completion
}