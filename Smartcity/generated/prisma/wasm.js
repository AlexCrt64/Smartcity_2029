
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  latitude: 'latitude',
  longitude: 'longitude',
  location: 'location',
  status: 'status',
  submittedBy: 'submittedBy',
  budget: 'budget',
  votingStart: 'votingStart',
  votingEnd: 'votingEnd',
  createdAt: 'createdAt'
};

exports.Prisma.VoteScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  voteType: 'voteType',
  sessionId: 'sessionId',
  createdAt: 'createdAt'
};

exports.Prisma.IdeaSubmissionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  latitude: 'latitude',
  longitude: 'longitude',
  location: 'location',
  status: 'status',
  submitterName: 'submitterName',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ProjectCategory = exports.$Enums.ProjectCategory = {
  LOGEMENT: 'LOGEMENT',
  TRANSPORT: 'TRANSPORT',
  ESPACES_VERTS: 'ESPACES_VERTS',
  EQUIPEMENTS_PUBLICS: 'EQUIPEMENTS_PUBLICS',
  AMENAGEMENT_URBAIN: 'AMENAGEMENT_URBAIN'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  PROPOSAL: 'PROPOSAL',
  VOTE_EN_COURS: 'VOTE_EN_COURS',
  APPROUVE: 'APPROUVE',
  EN_TRAVAUX: 'EN_TRAVAUX',
  TERMINE: 'TERMINE'
};

exports.VoteType = exports.$Enums.VoteType = {
  UPVOTE: 'UPVOTE',
  DOWNVOTE: 'DOWNVOTE'
};

exports.SubmissionStatus = exports.$Enums.SubmissionStatus = {
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.SubmissionType = exports.$Enums.SubmissionType = {
  CITY: 'CITY',
  CITIZEN: 'CITIZEN'
};

exports.Prisma.ModelName = {
  Project: 'Project',
  Vote: 'Vote',
  IdeaSubmission: 'IdeaSubmission'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/admin/Smartcity_2029/Smartcity/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/admin/Smartcity_2029/Smartcity/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": null,
        "value": "file:./dev.db"
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  // Generate Prisma Client outside of the Expo Router `app` folder\n  // to prevent Metro/Expo Router from scanning declaration files as routes\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\nmodel Project {\n  id          String          @id @default(cuid())\n  title       String\n  description String\n  category    ProjectCategory\n\n  // Location for map display\n  latitude  Float\n  longitude Float\n  location  String? // Human-readable location\n\n  // Project status and submission source\n  status      ProjectStatus  @default(PROPOSAL)\n  submittedBy SubmissionType @default(CITY)\n  budget      Int?\n\n  // Voting period\n  votingStart DateTime?\n  votingEnd   DateTime?\n\n  // Relations - simplified without user authentication\n  votes Vote[]\n\n  createdAt DateTime @default(now())\n\n  @@map(\"projects\")\n}\n\nmodel Vote {\n  id        String   @id @default(cuid())\n  projectId String\n  voteType  VoteType\n  // Store demo voting session info without real users\n  sessionId String? // For demo purposes only\n  createdAt DateTime @default(now())\n\n  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)\n\n  @@map(\"votes\")\n}\n\nmodel IdeaSubmission {\n  id          String          @id @default(cuid())\n  title       String\n  description String\n  category    ProjectCategory\n\n  // Location for citizen proposals\n  latitude  Float\n  longitude Float\n  location  String\n\n  status SubmissionStatus @default(SUBMITTED)\n\n  // Demo submission info without real users\n  submitterName String @default(\"Citoyen Anonyme\")\n\n  createdAt DateTime @default(now())\n\n  @@map(\"idea_submissions\")\n}\n\n// Essential enums only\nenum ProjectCategory {\n  LOGEMENT // Housing\n  TRANSPORT // Transportation\n  ESPACES_VERTS // Parks & green spaces\n  EQUIPEMENTS_PUBLICS // Public facilities\n  AMENAGEMENT_URBAIN // Urban development\n}\n\nenum ProjectStatus {\n  PROPOSAL // Initial proposal\n  VOTE_EN_COURS // Active voting\n  APPROUVE // Approved\n  EN_TRAVAUX // In progress\n  TERMINE // Completed\n}\n\nenum VoteType {\n  UPVOTE\n  DOWNVOTE\n}\n\nenum SubmissionStatus {\n  SUBMITTED // Just submitted\n  UNDER_REVIEW // Being reviewed\n  APPROVED // Approved\n  REJECTED // Rejected\n}\n\nenum SubmissionType {\n  CITY // City-submitted project\n  CITIZEN // Citizen-submitted project\n}\n",
  "inlineSchemaHash": "aed5502e2b3995ec2f34320cdaee54e05b7d8e8ffe76012e4ea71a562baac84b",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Project\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"enum\",\"type\":\"ProjectCategory\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ProjectStatus\"},{\"name\":\"submittedBy\",\"kind\":\"enum\",\"type\":\"SubmissionType\"},{\"name\":\"budget\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"votingStart\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"votingEnd\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"votes\",\"kind\":\"object\",\"type\":\"Vote\",\"relationName\":\"ProjectToVote\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"projects\"},\"Vote\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"voteType\",\"kind\":\"enum\",\"type\":\"VoteType\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToVote\"}],\"dbName\":\"votes\"},\"IdeaSubmission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"enum\",\"type\":\"ProjectCategory\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"SubmissionStatus\"},{\"name\":\"submitterName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"idea_submissions\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {}
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

